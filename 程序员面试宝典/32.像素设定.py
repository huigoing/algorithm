# -*- coding: utf-8 -*-
"""
Created on Wed Jul  3 15:05:21 2019

@author: Tang
"""

'''
题目描述



有一个单色屏幕储存在一维数组中，其中数组的每个元素代表连续的8位的像素的值，请实现一个函数
，将第x到第y个像素涂上颜色(像素标号从零开始)，并尝试尽量使用最快的办法。

给定表示屏幕的数组screen(数组中的每个元素代表连续的8个像素，且从左至右的像素分别对应元素的
二进制的从低到高位)，以及int x,int y，意义如题意所述，保证输入数据合法。请返回涂色后的新的屏幕数组。

测试样例：
[0,0,0,0,0,0],0,47
返回：[255,255,255,255,255,255]

举个例子  screen=[0, 1], x=3, y=9 

首先，screen每个元素表示8个像素（也就是它的二进制表示），把screen每个元素转为二进制（低位在左）： 

00000000  10000000 

然后将第x至第y个（从左至右）二进制位变为1： 

00011111   11000000 

然后转为十进制，由于低位在左，先逆序： 

00011111   --->  11111000  --->  248 

11000000  --->  00000011  ---> 3 

所以结果为 [248, 3] 

'''
def solution(screen,x,y):
     for i in range(x,y+1):
          t=i/8
          k=i%8
          screen[t]=screen[t] | 1<<k
     return screen